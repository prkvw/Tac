// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class NewExchange extends ethereum.Event {
  get params(): NewExchange__Params {
    return new NewExchange__Params(this);
  }
}

export class NewExchange__Params {
  _event: NewExchange;

  constructor(event: NewExchange) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get exchange(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UniswapFactory extends ethereum.SmartContract {
  static bind(address: Address): UniswapFactory {
    return new UniswapFactory("UniswapFactory", address);
  }

  createExchange(token: Address): Address {
    let result = super.call(
      "createExchange",
      "createExchange(address):(address)",
      [ethereum.Value.fromAddress(token)],
    );

    return result[0].toAddress();
  }

  try_createExchange(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createExchange",
      "createExchange(address):(address)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getExchange(token: Address): Address {
    let result = super.call("getExchange", "getExchange(address):(address)", [
      ethereum.Value.fromAddress(token),
    ]);

    return result[0].toAddress();
  }

  try_getExchange(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getExchange",
      "getExchange(address):(address)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getToken(exchange: Address): Address {
    let result = super.call("getToken", "getToken(address):(address)", [
      ethereum.Value.fromAddress(exchange),
    ]);

    return result[0].toAddress();
  }

  try_getToken(exchange: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getToken", "getToken(address):(address)", [
      ethereum.Value.fromAddress(exchange),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenWithId(token_id: BigInt): Address {
    let result = super.call(
      "getTokenWithId",
      "getTokenWithId(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(token_id)],
    );

    return result[0].toAddress();
  }

  try_getTokenWithId(token_id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTokenWithId",
      "getTokenWithId(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(token_id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exchangeTemplate(): Address {
    let result = super.call(
      "exchangeTemplate",
      "exchangeTemplate():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_exchangeTemplate(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "exchangeTemplate",
      "exchangeTemplate():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenCount(): BigInt {
    let result = super.call("tokenCount", "tokenCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenCount", "tokenCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class InitializeFactoryCall extends ethereum.Call {
  get inputs(): InitializeFactoryCall__Inputs {
    return new InitializeFactoryCall__Inputs(this);
  }

  get outputs(): InitializeFactoryCall__Outputs {
    return new InitializeFactoryCall__Outputs(this);
  }
}

export class InitializeFactoryCall__Inputs {
  _call: InitializeFactoryCall;

  constructor(call: InitializeFactoryCall) {
    this._call = call;
  }

  get template(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeFactoryCall__Outputs {
  _call: InitializeFactoryCall;

  constructor(call: InitializeFactoryCall) {
    this._call = call;
  }
}

export class CreateExchangeCall extends ethereum.Call {
  get inputs(): CreateExchangeCall__Inputs {
    return new CreateExchangeCall__Inputs(this);
  }

  get outputs(): CreateExchangeCall__Outputs {
    return new CreateExchangeCall__Outputs(this);
  }
}

export class CreateExchangeCall__Inputs {
  _call: CreateExchangeCall;

  constructor(call: CreateExchangeCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateExchangeCall__Outputs {
  _call: CreateExchangeCall;

  constructor(call: CreateExchangeCall) {
    this._call = call;
  }

  get out(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
